#!/bin/sh -e

source ~/.bashrc

if [[ -n "$CONSOLE_PATH" ]]; then
  # Misc console only install stuff
  cp -r /tmp/src/console/conf/console.conf.example /etc/openshift/console.conf
  cp /tmp/src/console/bin/oo-* /opt/ruby/bin
else
  # Misc broker only install stuff
  mkdir -p ~/.openshift
  cp /tmp/src/broker/misc/docker_broker_plugins.rb ~/.openshift/broker_plugins.rb
  cp -r /tmp/src/broker/conf/* /etc/openshift/
  cp -f /tmp/src/plugins/dns/bind/conf/openshift-origin-dns-bind.conf /etc/openshift/plugins.d/openshift-origin-dns-bind.conf || cat > /etc/openshift/plugins.d/openshift-origin-dns-bind.conf <<EOF
# Settings related to the bind variant of an OpenShift DNS plugin

# The DNS server
BIND_SERVER="172.17.42.1"

# The DNS server's port
BIND_PORT=53

# The key name for your zone
BIND_KEYNAME="example.com"

# base64-encoded key, most likely from /var/named/example.com.key.
BIND_KEYVALUE="t1HIfjY/BqlvWX83PCT4/Y+f0xm0h2m3xF72SalWd2mAJlPoiCUALPQAWjX63RL8pgcFio3nZiSMncJqw03Dug=="

# The base zone for the DNS server
BIND_ZONE="example.com"
EOF
  cp /tmp/src/plugins/msg-broker/mcollective/conf/openshift-origin-msg-broker-mcollective.conf.example /etc/openshift/plugins.d/openshift-origin-msg-broker-mcollective.conf
  cp /tmp/src/broker-util/oo-* /opt/ruby/bin

  #TODO this is temporary, we do not have an rpm for this
  gem install mcollective-client --version 2.2.3
fi

# Install utils for oo-* scripts and make oo-* executable
cp /tmp/src/util-scl/oo-* /opt/ruby/bin
chmod 750 /opt/ruby/bin/oo-*

# TODO fix oo-app-info
# it looks like this is currently just app_info.rb
# it looks like it's only used by oo-app-info
# would be nice not to have this installed into the SCL system
#cp /tmp/src/broker-util/lib/* /opt/rh/ruby193/root/usr/share/ruby/

# Imported from ruby-19-centos assemble

function rake_assets_precompile() {
  [ -f .sti/markers/disable_asset_compilation ] && return
  [ ! -f Gemfile ] && return
  [ ! -f Rakefile ] && return
  ! grep " rails " Gemfile.lock >/dev/null && return
  ! grep " execjs " Gemfile.lock >/dev/null && return
  ! bundle exec "rake -T" | grep "assets:precompile" >/dev/null && return

echo "---> Starting asset compilation."
  bundle exec rake assets:precompile
}

if [ -e /tmp/artifacts/gems.tgz ]; then
echo "Restoring build artifacts"
  pushd ${HOME} >/dev/null
  tar zxf /tmp/artifacts/gems.tgz
  popd >/dev/null
fi

app_runtime_dir="${HOME}/src"
app_src_dir="/tmp/src"

echo "---> Installing application source"
mkdir -p ${app_runtime_dir}
cp -Rf ${app_src_dir}/* ${app_runtime_dir}/

pushd "$app_runtime_dir/${APP_ROOT}" >/dev/null
echo "---> Building your Ruby application from source"

if [ -f Gemfile ]; then
  ADDTL_BUNDLE_ARGS=""
  if [ -f Gemfile.lock ]; then
    ADDTL_BUNDLE_ARGS="--deployment"
  fi

  if [[ "$RAILS_ENV" == "development" || "$RACK_ENV" == "development" ]]; then
    BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"test"}
  elif [[ "$RAILS_ENV" == "test" || "$RACK_ENV" == "test" ]]; then
    BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"development"}
  else
    BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"development:test"}
  fi
  # We can't use 'exec' here because it will exit from the script after the
  # bundle install command finish. Thus the bundle install cannot receive SIGINT
  # from console (ctrl+c)
  #
  echo "---> Running 'bundle install ${ADDTL_BUNDLE_ARGS} --local'"
  bundle install ${ADDTL_BUNDLE_ARGS} --local
fi

rake_assets_precompile

# TODO: Add `rake db:migrate` if linked with DB container

popd >/dev/null
